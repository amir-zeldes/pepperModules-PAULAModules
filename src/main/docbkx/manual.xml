<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>PAULAModules</title>
        <subtitle>User's Guide</subtitle>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Florian</firstname>
                    <surname>Zipser</surname>
                </personname>
                <email>saltnpepper@lists.hu-berlin.de</email>
            </author>
            <author>
                <personname>
                    <firstname>Mario</firstname>
                    <surname>Frank</surname>
                </personname>
                <email>saltnpepper@lists.hu-berlin.de</email>
            </author>
            <author>
                <orgname xml:id="org1">INRIA</orgname>
            </author>
            <author>
                <orgname xml:id="org2">SFB 632 Information Structure / D1 Linguistic Database</orgname>
            </author>
            <author>
                <orgname xml:id="org3">Humboldt-Universität zu Berlin</orgname>
            </author>
            <author>
                <orgname xml:id="org4">Universität Potsdam</orgname>
            </author>
        </authorgroup>
        <copyright>
            <year>2009</year>
            <holder><xref linkend="org1"/>, <xref linkend="org2"/>, <xref linkend="org3"/>, <xref linkend="org1"/>,<xref linkend="org4"/>, All rights reserved.</holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The intention of this document is first to give a guide to the user of how to use the
            here mentioned pepper modules and how to utilize a mapping performed by them. Second
            this document shall give a closer view in the details of such a mapping in a declarative
            way, to give the user a chance to understand how specific data will be mapped by the
            presented pepper modules.</para>
    </preface>
    <chapter>
        <title>Overview</title>
        <para>This project contains the pepper modules listed in <xref linkend="table_overview"/>. A
            single module can be identified via its coordinates (module-name, format-name,
            format-version) also given in <xref linkend="table_overview"/>. You can use these
            coordinates in a pepper workflow description file to identify the modules in a pepper
            conversion process. A description of how to model a workfloe description file can be
            found under https://korpling.german.hu-berlin.de/saltnpepper/.</para>
        <para>PAULA XML is the Potsdamer Austauschformat für linguistische Annotation ("Potsdam Interchange Format for Linguistic Annotation"), see <link xlink:href="http://www.sfb632.uni-potsdam.de/d1/paula/doc/">http://www.sfb632.uni-potsdam.de/d1/paula/doc/</link>. PAULA XML has been developed in Project D1: Linguistic Database: Annotation and Retrieval of the SFB 632. It is an XML-based standoff representation format, which has been designed to represent data with heterogeneous annotation layers produced by different tools.</para>
        <table xml:id="table_overview" frame="all">
            <title>pepper modules contained in this project</title>
            <tgroup cols="3" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Name of pepper module</entry>
                        <entry>Type of pepper module</entry>
                        <entry>Format (if module is im- or exporter)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><xref linkend="paula_importer" endterm="paula_importer_name"/></entry>
                        <entry>importer</entry>
                        <entry>1.0</entry>
                    </row>
                    <row>
                        <entry><xref linkend="paula_exporter" endterm="paula_exporter_name"/></entry>
                        <entry>exporter</entry>
                        <entry>1.0</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <chapter xml:id="changes">
        <title>Changes</title>
        <para>No description exists so far</para>
    </chapter>
    <chapter>
        <title>Mapping between PAULA and Salt</title>
        <para>The PAULA format is very similar to the Salt metamodel, therefore the mapping between them often is very straight forward.</para>
        <sect1>
            <title>PAULA version 1.0</title>
            <para>
                <itemizedlist>
                    <listitem><para>Folder structure in PAULA SCorpus and SDocument in Salt</para></listitem>
                    <listitem><para>MetaData in PAULA SMetaANNottation on SDocument or SCorpus in Salt</para></listitem>
                    <listitem><para>&lt;struct> to SSTructure</para></listitem>
                    <listitem><para>&lt;rel> inside &lt;struct>to SDocminanceRelation</para></listitem>
                    <listitem><para>&lt;rel> to SPointingRelation</para></listitem>
                    <listitem><para>content of &lt;body> to STextualDS.sText</para></listitem>
                    <listitem><para>&lt;mark> with type tok to SToken</para></listitem>
                    <listitem><para>&lt;mark> to SSpan and artificial SSpanningRelation</para></listitem>
                </itemizedlist>
            </para>
        </sect1>
    </chapter>
    <chapter xml:id="paula_importer">
        <title xml:id="paula_importer_name">PAULAImporter</title>
        <para>General information about this importer.</para>
        <sect1>
            <title>Mapping to Salt</title>
            <para>To represent this model in Salt we mapped the time based event concept to the
                token concept of Salt. A general difference between both models is the handling of
                primary texts. EXMARaLDA, does not care about primary texts, because of the event
                based concept. Therefore it is necessary to define one or more tiers to contain the
                primary text resource in the EXB model when mapping the data to Salt. This is done
                via an entry in the property file needed by the EXMARaLDAImporter (see
                “salt.Token“). The values of each Event objects contained in the marked Tier object
                will be concatenated and mapped to a primary text (STextualDS object). If there are
                two or more Tier objects marked, each will be mapped to a separate primary text.
                Next to this each Event object contained in this Tier object will also be mapped to
                a SToken object. A Timeline object of EXMARaLDA will be mapped to the STimeline
                object of Salt. Each SToken object will refer to the range (via SPointOfTime
                objects) of time inside the STimeline object. After mapping, the range of time of a
                SToken object is the same as for the corresponding Event object. Event objects not
                part of the marked Tier object will be mapped to a SSpan object. The value of the
                Event object will be mapped to an SAnnotation object with Event.value →
                SAnnotation.sValue and Tier.categoryName → SAnnotation.sName. The project-name of
                the EXMARaLDA document will be mapped to the SName of the corresponding SDocument
                object. To have a more user-defined way for mappings you can use the properties
                described in the section “Property file“.</para>
        </sect1>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="importer_prop_overview"/> contains an overview of all
                usable properties to customize the behaviour of this pepper module. The following
                section contains a close description to each single property and describes the
                resulting differences in the mapping to the salt model.</para>
            <table xml:id="importer_prop_overview" frame="all">
                <title>properties to customize importer behaviour</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="prop_prop1" endterm="importer_prop1_title"
                            /></entry>
                            <entry>Tier.categoryName</entry>
                            <entry>optional</entry>
                            <entry>--</entry>
                        </row>                       
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="prop_prop1">
                <title xml:id="importer_prop1_title">salt.token</title>
                <para>With the property <property>salt.token</property> you can mark the Tier object
                    which shall be interpreted as the one containing the tokenization and the
                    primary text.</para>
                <para><code>salt.token=Tier.categoryName</code></para>
                <para>Imagine the example of <xref linkend="primaryData_exm"/>, there we have a Tier
                    object with categorical name txt displayed as X[txt]. <figure
                        xml:id="primaryData_exm">
                        <title>primary data in EXMARaLDA</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/primaryData_exm.jpg"/>
                            </imageobject>
                        </mediaobject>
                    </figure> This Tier object contains the data representing the primary text. To
                    map them in correct way to Salt, you need to set the property “salt.token”: </para>
                <para><code>salt.token=txt</code></para>
            </sect2>
        </sect1>
    </chapter>
    
    <chapter xml:id="paula_exporter">
        <title xml:id="paula_exporter_name">PAULAExporter</title>
        <sect1>
            <title>Mapping to Salt</title>
            <para>The PAULAExporter , like the PAULAImporter, may have a property file which is described more precisely in the next paragraph. After reading the property file, the PAULAExporter invokes the mapping to PAULA XML files.
                Currently, the supported output version of PAULA is version 0.9.</para>
        </sect1>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="importer_prop_overview"/> contains an overview of all
                usable properties to customize the behaviour of this pepper module. The following
                section contains a close description to each single property and describes the
                resulting differences in the mapping to the salt model.</para>
            <table xml:id="exorter_prop_overview" frame="all">
                <title>properties to customize importer behaviour</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="exprop_prop1" endterm="exporter_prop1_title"
                            /></entry>
                            <entry>yes|no</entry>
                            <entry>optional</entry>
                            <entry>--</entry>
                        </row>                       
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="exprop_prop1">
                <title xml:id="exporter_prop1_title">paulaExporter.validateOutput</title>
                <para>The PAULAExporter supports the validation of the output files against the PAULA DTDs  by parsing the created PAULA documents.
                    To enable this function, the property file needs to have a property	"paulaExporter.validateOutput" with the value "yes", as shown in Example 1.</para>
                <para><code>paulaExporter.validateOutput=yes</code></para>
            </sect2>
        </sect1>
    </chapter>
</book>
